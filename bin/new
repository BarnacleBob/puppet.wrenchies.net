#!/bin/bash

[ -e "$(dirname $0)/functions.sh" ] && source $(dirname $0)/functions.sh || { echo "could not find functions.sh to source"; exit 5; }

function usage {
	echo "$0 [env] <cmd> <args>"
	echo ""
	echo "Commands"
	echo "-----------------------------------------------------------------"
	echo "environment <name>		create a new environment tree structure"
	echo "modules					create a new modules directory"
	echo "module <name> [extra]		create a new module optionall add the stuff"
	echo "*class <name> 			create a new class"
	echo "							required for the 'shared' module you probably"
	echo "							do not want the extra"
	echo "*define <name>"
	echo "*role <name>"
	echo ""
	echo "* requires env to be passed or default env to be set"
	echo ""
	usageEnvironments
	exit 2
}

case $1 in
	environment|modules|module|class|define|role) ;;
	*) usage ;;
esac

command=$1
shift

function class {
	env=$(getEnv) || { echo "environment doesn't exist"; exit 1; }

	[ -e "$(getEnvManifestPath $env)/classes/$1.pp" ] && { echo "class $1 already exists in $env"; exit 1; }
	cat > $(getEnvManifestPath $env)/classes/$1.pp <<-NEW
		class $passedEnv::$1 {

		}
	NEW

	git add $(getEnvManifestPath $env)/classes/$1.pp

	$__BASE__/puppet.wrenchies.net/bin/edit $env class $1
}
function role {
	env=$(getEnv) || { echo "environment doesn't exist"; exit 1; }

	[ -e "$(getEnvManifestPath $env)/roles/$1.pp" ] && { echo "role $1 already exists in $env"; exit 1; }
	if [ "$1" == "puppetmaster" ]; then
		cat > $(getEnvManifestPath $env)/roles/$1.pp <<-NEW
			class $passedEnv::role::$1 {
			 	\$role="$1"

			 	include framework::base
			 	include framework::apache
			 	include framework::mysql
			 	include framework::puppetmaster
			}
		NEW
	else
		cat > $(getEnvManifestPath $env)/roles/$1.pp <<-NEW
			class $passedEnv::role::$1 {
			 	\$role="$1"

			}
		NEW
	fi

	git add $(getEnvManifestPath $env)/roles/$1.pp

	$__BASE__/puppet.wrenchies.net/bin/edit $env role $1
}
function define {
	env=$(getEnv) || { echo "environment doesn't exist"; exit 1; }

	if [ "$env" != "shared" ]; then
		prefix="$env::"
	fi

	[ -e "$(getEnvManifestPath $env)/defines/$1.pp" ] && { echo "define $1 already exists in $env"; exit 1; }
	cat > $(getEnvManifestPath $env)/defines/$1.pp <<-NEW
		define $prefix$1 (\$ensure="present") {
		 	if \$ensure=="present" {

		 	}else{

		 	}
		}
	NEW

	git add $(getEnvManifestPath $env)/defines/$1.pp

	$__BASE__/puppet.wrenchies.net/bin/edit $env define $1
}

function modules {
	[ -e "$__BASE__/modules" ] && { echo "modules folder already exists"; exit 1; }
	mkdir -p $__BASE__/modules
	cat > $__BASE__/modules/syntax.pp <<-SYNTAX
		import "./*/manifests/init.pp"
	SYNTAX
	git add $__BASE__/modules
}

function module {
	[ ! -e "$__BASE__/modules" ] && { echo "no modules directory, run new modules first"; exit 1; }
	[ -e "$__BASE__/modules/$1" ] && { echo "module $1 already exists"; exit 1; }

	mkdir -p $__BASE__/modules/$1/{lib/{facter,puppet/{provider,parser/functions,type}},manifests,templates,files}

	if [ "$2" == "extra" ]; then
		mkdir -p $__BASE__/modules/$1/{files/{all,role},manifests/{classes,roles,defines}}

		touch $__BASE__/modules/$1/manifests/defaults.pp
		touch $__BASE__/modules/$1/manifests/roles/blank.pp
		touch $__BASE__/modules/$1/manifests/classes/blank.pp
		touch $__BASE__/modules/$1/manifests/defines/blank.pp

		cat > $__BASE__/modules/$1/manifests/init.pp <<-INIT	
			import "./defaults.pp"
			import "./roles/*.pp"
			import "./classes/*.pp"
			import "./defines/*.pp"
		INIT
	fi

	#we do this trick to add the empty directories to git to help users understand paths
	find $__BASE__/modules/$1 -type d -empty -print0 | xargs -0 -I{} touch '{}'/.gitignore

	git add $__BASE__/modules/$1
}

function environment {
	#create a new environment
	isEnvironment $1 && { echo "environment $1 already exists"; exit 1; }

	mkdir -p $__BASE__/environments/$1/modules/main/{files/{all,role,host},manifests/{classes,roles,defines}}

	touch $__BASE__/environments/$1/nodes.pp
	touch $__BASE__/environments/$1/modules/main/manifests/defaults.pp
	touch $__BASE__/environments/$1/modules/main/manifests/roles/blank.pp
	touch $__BASE__/environments/$1/modules/main/manifests/classes/blank.pp
	touch $__BASE__/environments/$1/modules/main/manifests/defines/blank.pp

	cat > $__BASE__/environments/$1/site.pp <<-SITE
		import "framework"
		import "shared"
		import "main"
		import "nodes.pp"
	SITE
	cat > $__BASE__/environments/$1/syntax.pp <<-SYNTAX
		import "./nodes.pp"
		import "./modules/*/manifests/init.pp"
	SYNTAX
	cat > $__BASE__/environments/$1/modules/main/manifests/init.pp <<-INIT
		import "./defaults.pp"
		import "./roles/*.pp"
		import "./classes/*.pp"
		import "./defines/*.pp"
	INIT

	#we do this trick to add the empty directories to git to help users understand paths
	find $__BASE__/environments/$1 -type d -empty -print0 | xargs -0 -I{} touch '{}'/.gitignore

	git add $__BASE__/environments/$1
}

$command $@
